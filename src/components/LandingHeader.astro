---
/* import GlobalIcon from './GlobalIcon.astro' */
import Logo from './Logo.astro'
import LandingSideBar from './LandingSideBar.astro'
---

<header
  id='landing-header'
  class='py-3 px-12 flex items-center fixed top-0 w-full justify-between z-40 text-white'
>
  <div class='flex flex-grow basis-0'>
    <Logo />
  </div>
  <nav>
    <ul
      class='max-[1200px]:hidden flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:text-current [&>li>a]:font-normal [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2'
    >
      <li><a href='#'>Model S</a></li>
      <li><a href='#'>Model 3</a></li>
      <li><a href='#'>Model X</a></li>
      <li><a href='#'>Model Y</a></li>
      <li><a href='#'>Powerwall</a></li>
      <li><a href='#'>Charging</a></li>
    </ul>
  </nav>
  <nav class='flex flex-grow justify-end basis-0'>
    <ul
      class='[&>*:not(:last-child)]:max-[1200px]:hidden [&>*:last-child]:max-[1200px]:bg-black/5 [&>*:last-child]:max-[1200px]:backdrop-blur-sm [&>*:last-child]:max-[1200px]:rounded flex text-sm [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:text-current [&>li>a]:font-normal [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2'
    >
      <li><a href='#'>Support</a></li>
      <li><a href='#'>Shop</a></li>
      <li><a href='#'>Account</a></li>
      <li><a href='#' id='menu-btn'>Menu</a></li>
    </ul>
  </nav>
  <LandingSideBar />
  <div
    id='menu-backdrop'
    class={`
      absolute bg-black/5 backdrop-blur-lg rounded
      translate-x-[var(--left)] translate-y-[var(--top)]
      left-0 top-0
      w-[var(--width)] h-[var(--height)]
      transition-all duration-500
      ease-in-out opacity-0 -z-10
    `}
  >
  </div>
</header>

<script>
  const listItem = document.querySelectorAll('#landing-header li')
  const menuBackDrop = document.querySelector('#menu-backdrop') as HTMLElement

  listItem.forEach(item => {
    item.addEventListener('mouseenter', () => {
      const { left, top, width, height } = item.getBoundingClientRect()

      menuBackDrop.style.setProperty('--left', `${left}px`)
      menuBackDrop.style.setProperty('--top', `${top}px`)
      menuBackDrop.style.setProperty('--width', `${width}px`)
      menuBackDrop.style.setProperty('--height', `${height}px`)
      menuBackDrop.style.opacity = '1'
      menuBackDrop.style.visibility = 'visible'
    })

    item.addEventListener('mouseleave', () => {
      menuBackDrop.style.opacity = '0'
      menuBackDrop.style.visibility = 'hidden'
    })
  })
</script>

<script>
  const headerEl = document.querySelector('#landing-header') as HTMLElement
  const observerOptions = {
    root: null, // defaults to the viewport, root could be used for an element
    rootMargin: '0px', // as quick as it is showed on screen
    threshold: 0.9 // percentage of visibility of element to be detected
  }

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const { isIntersecting } = entry
      if (isIntersecting) {
        const color = entry.target.getAttribute('data-header-color')
        headerEl.style.color = color
      }
    })
  }, observerOptions)

  const sectionsEls = document.querySelectorAll('.landing-section')

  sectionsEls.forEach(section => observer.observe(section))
</script>

<script>
  const menuBtn = document.querySelector('#menu-btn') as HTMLElement
  const closeBtn = document.querySelector('#close-btn') as HTMLElement
  const sideBar = document.querySelector('#side-bar') as HTMLElement

  menuBtn.addEventListener('click', () => {
    sideBar.style.display = 'block'
    sideBar.style.transitionDuration = '1000'
  })

  closeBtn.addEventListener('click', () => {
    sideBar.style.display = 'none'
    sideBar.style.transitionDuration = '1000'
  })
</script>
